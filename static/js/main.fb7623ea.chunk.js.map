{"version":3,"sources":["components/Burger/BurgerIngredients/BurgerIngredients.css","components/Burger/BuildControls/BuildControl/BuildControl.css","components/Layout/Layout.css","components/Burger/Burger.css","components/Burger/BuildControls/BuildControls.css","hoc/Auxiliary.js","components/Layout/Layout.js","components/Burger/BurgerIngredients/BurgerIngredients.js","components/Burger/Burger.js","components/Burger/BuildControls/BuildControl/BuilControl.js","components/Burger/BuildControls/BuildControls.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Auxiliary","props","children","layout","className","classes","Content","BurgerIngredients","ingredients","this","type","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Bacon","Cheese","Salad","Component","burger","transformedIngredients","Object","keys","map","igKey","Array","_","i","key","reduce","arr","curr","concat","length","Burger","BuildControl","Label","label","Less","More","controls","BuildControls","ctrl","BurgerBuilder","state","meat","salad","bacon","cheese","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb7623ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredients__BreadBottom__16czh\",\"BreadTop\":\"BurgerIngredients__BreadTop__1F9cD\",\"Seeds1\":\"BurgerIngredients__Seeds1__1KqDN\",\"Seeds2\":\"BurgerIngredients__Seeds2__1j0Rg\",\"Meat\":\"BurgerIngredients__Meat__1kFCF\",\"Cheese\":\"BurgerIngredients__Cheese__3JVcn\",\"Salad\":\"BurgerIngredients__Salad__142r8\",\"Bacon\":\"BurgerIngredients__Bacon__3LSem\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControl\":\"BuildControl__BuildControl__1jYc3\",\"Label\":\"BuildControl__Label__33Z-p\",\"Less\":\"BuildControl__Less__377MJ\",\"More\":\"BuildControl__More__28-hQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout__Content__LhJtv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger__Burger__3K4F-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControls\":\"BuildControls__BuildControls__3_01f\"};","\r\n\r\nconst Auxiliary = (props)=>props.children\r\n\r\nexport default Auxiliary;","import React from 'react'\r\nimport Auxiliary from '../../hoc/Auxiliary'\r\nimport classes from './Layout.css'\r\n\r\nconst layout = (props) => (\r\n    <Auxiliary>\r\n        <div>\r\n            side bar, toolbar, backdrop\r\n        </div>\r\n        <main className={classes.Content}>\r\n            {props.children}\r\n        </main>\r\n    </Auxiliary>\r\n)\r\n\r\nexport default layout","import React, { Component } from 'react'\r\nimport classes from './BurgerIngredients.css'\r\nimport propTypes from 'prop-types'\r\n\r\nclass BurgerIngredients extends Component {\r\n    render() {\r\n        let ingredients = null\r\n        switch (this.props.type) {\r\n            case ('bread-bottom'):\r\n                ingredients = <div className={classes.BreadBottom}></div>\r\n                break\r\n            case ('bread-top'):\r\n                ingredients = (\r\n                    <div className={classes.BreadTop}>\r\n                        <div className={classes.Seeds1}></div>\r\n                        <div className={classes.Seeds2}></div>\r\n                    </div>\r\n                )\r\n                break\r\n            case ('meat'):\r\n                ingredients = <div className={classes.Meat}></div>\r\n                break\r\n            case ('bacon'):\r\n                ingredients = <div className={classes.Bacon}></div>\r\n                break\r\n            case ('cheese'):\r\n                ingredients = <div className={classes.Cheese}></div>\r\n                break\r\n            case ('salad'):\r\n                ingredients = <div className={classes.Salad}></div>\r\n                break\r\n            default:\r\n                ingredients = null\r\n        }\r\n        return ingredients\r\n    }\r\n}\r\n\r\nBurgerIngredients.propTypes = {\r\n    type: propTypes.string.isRequired\r\n}\r\n\r\nexport default BurgerIngredients","import React from 'react'\r\nimport BurgerIngredients from './BurgerIngredients/BurgerIngredients'\r\nimport classes from './Burger.css'\r\n\r\nconst burger = (props) => {\r\n\r\n    let transformedIngredients = Object.keys(props.ingredients).map(igKey => {\r\n        return [...Array(props.ingredients[igKey])].map((_, i) =>\r\n            <BurgerIngredients key={igKey + i} type={igKey} />\r\n        )\r\n    }).reduce((arr, curr) => {\r\n        return arr.concat(curr)\r\n    }, [])\r\n\r\n    if(transformedIngredients.length === 0) {\r\n        transformedIngredients = <p>Please Start Adding Ingredients</p>\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.Burger}>\r\n            <BurgerIngredients type=\"bread-top\" />\r\n            {transformedIngredients}\r\n            <BurgerIngredients type=\"bread-bottom\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default burger","import React from 'react'\r\nimport classes from './BuildControl.css'\r\n\r\nconst BuildControl = (props)=>{\r\n    return (\r\n        <div className={classes.BuildControl}>\r\n            <div className={classes.Label}>{props.label}</div>\r\n            <button className={classes.Less}>Less</button>\r\n            <button className={classes.More}>More</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BuildControl","import React from 'react'\r\nimport classes from './BuildControls.css'\r\nimport BuildControl from '../BuildControls/BuildControl/BuilControl'\r\n\r\nconst controls = [\r\n    { label: 'Salad', type: 'salad' },\r\n    { label: 'Bacon', type: 'bacon' },\r\n    { label: 'Cheese', type: 'cheese' },\r\n    { label: 'Meat', type: 'meat' },\r\n]\r\nconst BuildControls = (props) => {\r\n\r\n    return (\r\n        <div className={classes.BuildControls}>\r\n            {controls.map(ctrl => (\r\n                <BuildControl key={ctrl.label} label={ctrl.label} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BuildControls","import React, { Component } from 'react'\r\nimport Auxiliary from '../../hoc/Auxiliary'\r\nimport Burger from '../../components/Burger/Burger'\r\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls'\r\n\r\nclass BurgerBuilder extends Component {\r\n\r\n    state = {\r\n        ingredients  : {\r\n            meat : 1,\r\n            salad : 1,\r\n            bacon : 1,\r\n            cheese : 1\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Auxiliary>\r\n                <Burger ingredients={this.state.ingredients} />\r\n                <BuildControls />\r\n            </Auxiliary>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BurgerBuilder","import React from 'react';\nimport Layout from './components/Layout/Layout'\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder'\n\nfunction App() {\n  return (\n    <div >\n      <Layout>\n        <BurgerBuilder />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}